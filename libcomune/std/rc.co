using std::box::Box;
using core::libc::free;

struct RcInner<type T> {
	usize count;
	T data;
}

struct Rc<type T> {
	RcInner<T> raw* inner;

	new(new& self, T data) {
		let inner = new RcInner<T> {
			count: 1,
			data,
		};

		self.inner = new Box<RcInner<T>>(inner).into_raw();
	}

	new(new& self, Rc<T>& other) {
		self.inner = other.inner;
		
		unsafe { 
			self.inner->count += 1;
		}
	}

	drop(mut& self) {
		unsafe {
			self.inner->count -= 1;

			if self.inner->count == 0 {
				drop self.inner->data;
				free(self.inner as void raw*);
			}
		}
	}
}
