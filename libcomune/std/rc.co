using std::box::Box;
using core::libc::free;

struct RcInner<type T> {
	usize count;
	T data;
}

struct Rc<type T> {
	RcInner<T> mut* inner;

	new from_parts(new& self, T t) {
		RcInner<T> inner = new RcInner<T> {
			count: 1,
			data: t,
		};

		self = new Rc<T> {
			inner: new Box<RcInner<T>>(inner).into_raw(),
		}
	}

	new(new& self, Rc<T>& other) {
		self = new Rc<T> {
			inner: other.inner,
		};
		
		unsafe { *self.inner }.count += 1;
	}

	drop(mut& self) {
		unsafe {*self.inner}.count -= 1;

		if unsafe {*self.inner}.count == 0 {
			drop unsafe {*self.inner}.data;
			free(self.inner as void mut*);
		}
	}
}
