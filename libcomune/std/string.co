using std::vector::Vector;

struct String {
	Vector<u8> vec;

	new(new& self) {
		self.vec = new Vector<u8>();
	}

	new(new& self, String& copied) {
		self.vec = new Vector<u8>(copied.vec);
	}
}

impl String {
	fn push_str(mut& self, [u8]& string) {
		auto len = self.len() + 1usize;

		unsafe {
			self.vec.resize_zeroed(len + string.len());
		}
	}

	fn len(&self) -> usize {
		auto len = self.vec.len();
		
		if len == 0 {
			return 0
		} else {
			return len - 1usize
		}
	}
}