using core::libc::{
	malloc,
	realloc,
	free,
	memcpy,
	memset,
};

using core::mem::{
	size_of,
	bit_cast,
	null
};

using core::panic::panic;
using core::traits::Copy;
using core::option::{Option, Some, None};

struct Vector<type T> {
	T raw* data;
	usize len;
	usize capacity;

	new(new& self) {
		new (self) Vector<T> {
			data: null<T>(),
			capacity: 0,
			len: 0,
		};
	}

	new(new& self, Vector<T>& copied) {
		new (self) Vector<T>();
		
		self.realloc(copied.capacity);
		
		if copied.len == 0 {
			return
		}
		
		memcpy(
			self.data as void mut*,
			copied.data as void*,
			copied.len
		);

		self.len = copied.len;
	}
	
	drop(mut& self) {
		if self.capacity > 0 {
			for (let usize mut i = 0; i < self.len; i += 1) {
				unsafe {
					drop *(self.data + i);
				}
			}

			free(self.data as void raw*);
		}
	}
}

impl<type T> Vector<T> {
	void push(mut& self, T elem) {
		if self.len >= self.capacity {
			self.realloc(
				if self.capacity == 0 {
					self.capacity + 1
				} else { 
					self.capacity * 2
				}
			)
		}
		
		unsafe {
			core::mem::write<T>(
				self.data + self.len,
				elem
			);
		}
		
		self.len += 1;
	}

	Option<T> pop(mut& self) {
		if self.len == 0 {
			return None<T>
		} else {
			self.len -= 1;

			unsafe {
				return Some<T>(
					*(self.data + self.len)
				)
			}
		}
	}

	void realloc(mut& self, usize capacity) {
		let tmp = realloc(
			self.data as void raw*, 
			capacity * size_of<T>()
		);

		if tmp {
			self.data = tmp as T raw*;
			self.capacity = capacity;
		} else {
			free(self.data as void raw*);
			panic("failed to reallocate Vector storage!")
		}
	}

	void reserve(mut& self, usize capacity) {
		if capacity <= self.capacity {
			return
		}

		self.realloc(capacity)
	}
	
	Option<T*> get(&self, usize i) {
		if i >= self.len {
			None<T*>
		} else {
			Some<T*>((self.data + i) as T*)
		}
	}

	Option<T mut*> get_mut(mut& self, usize i) {
		if i >= self.len {
			None<T mut*>
		} else {
			Some<T mut*>((self.data + i) as T mut*)
		}
	}

	Option<T*> back(&self) {
		if self.is_empty() {
			None<T*>
		} else {
			Some<T*>((self.data + self.len - 1) as T*)
		}
	}

	Option<T mut*> back_mut(mut &self) {
		if self.is_empty() {
			None<T mut*>
		} else {
			Some<T mut*>((self.data + self.len - 1) as T mut*)
		}
	}

	// suboptimal performance, but it works for now
	void resize_zeroed(mut& self, usize len) {
		if len > self.len {
			self.reserve(len);
			
			memset(
				(self.data + self.len) as void mut*,
				0,
				len - self.len
			);

			self.len = len;
		} else {
			while len < self.len {
				self.pop();
			}
		}
	}

	usize len(&self) {
		self.len
	}

	bool is_empty(&self) {
		self.len == 0
	}

	[T]* as_slice(&self) {
		unsafe {
			core::slice::construct_slice<T>(
				self.data as T*,
				self.len
			)
		}
	}

	[T] mut* as_slice_mut(mut& self) {
		unsafe {
			core::slice::construct_slice_mut<T>(
				self.data as T mut*,
				self.len
			)
		}
	}
}

impl<type T: Copy> Vector<T> {
	void resize(mut& self, usize len, T fill) {
		if len > self.len {
			self.reserve(len);
			
			for (let usize mut i = self.len; i < len; i += 1) {
				unsafe {
					core::mem::write<T>(self.data + i, fill);
				}
			}

			self.len = len;
		} else {
			while len < self.len {
				self.pop();
			}
		}
	}
}