
struct Vector<T> {
	dyn T[] data;
	usize size;
	usize capacity;
}


impl<T> Vector<T> {
	
}


impl Clone for Vector<T: Clone> {
	Self clone(ref self) {
		Self result = Vector<T>::new();
		result.reserve(size);

		for (elem in data)
			result.push(elem.clone());		

		return result;
	}
}


impl Clone for Vector<T: Copy + Clone> {
	Self clone(ref self) {
		Self result = Vector<T>::new();
		result.reserve(size);

		// T is Copy, so a straight memcpy of `data` constitutes a valid Clone
		std::mem::copy(self.data, result.data);

		return result;
	}
}