using core::libc::{fopen, fclose, fread, CFileHandle};
using core::option::Option;


struct File {
	CFileHandle handle;

	drop(mut& self) {
		fclose(self.handle);
	}
}

impl File {
	fn open(u8* filename) -> Option<File> {
		let handle = fopen(filename, c"r");

		if handle {
			new Option<File>::Some(new File { handle })
		} else {
			new Option<File>::None
		}
	}

	fn create(u8* filename) -> Option<File> {
		let handle = fopen(filename, c"w");

		if handle {
			new Option<File>::Some(new File { handle })
		} else {
			new Option<File>::None
		}
	}
}

impl core::traits::Read for File {
	fn read(mut& self, [u8] mut* buf) -> usize {
		unsafe {
			fread(
				(buf->ptr_mut()) as void mut*,
				1usize,
				buf->len(),
				self.handle
			)
		}
	}
}