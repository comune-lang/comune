using core::panic::panic;


enum Result<type T, type E> {
	Ok { T value; },
	Err { E err; },
}

type Ok<type T, type E> = Result<T, E>::Ok;
type Err<type T, type E> = Result<T, E>::Err;

impl<type T, type E> Result<T, E> {
	fn unwrap(self) -> T {
		match self {
			Ok<T, E> { value } => value,
			Err<T, E> { .. } => panic("called unwrap() on an Err value!"),
		}
	}

	fn unwrap_err(self) -> E {
		match self {
			Ok<T, E> { .. } => panic("called unwrap_err() on an Ok value!"),
			Err<T, E> { err } => err,
		}
	}

	fn is_ok(&self) -> bool {
		match self {
			Ok<T, E> { .. } => true,
			Err<T, E> { .. } => false,
		}
	}

	fn is_err(&self) -> bool {
		!self.is_ok()
	}
}