using core::panic::panic;


enum Result<type T, type E> {
	Ok { T value; },
	Err { E err; },
}
/*
impl<type T, type E> Result<T, E> {
	fn unwrap(self) -> T {
		match self {
			Result<T, E>::Ok { value } => value,
			Result<T, E>::Err { .. } => panic("called unwrap() on an Err value!"),
		}
	}

	fn unwrap_err(self) -> E {
		match self {
			Result<T, E>::Ok { .. } => panic("called unwrap_err() on an Ok value!"),
			Result<T, E>::Err { err } => err,
		}
	}

	fn is_ok(&self) -> bool {
		match self {
			Result<T, E>::Ok { .. } => true,
			Result<T, E>::Err { .. } => false,
		}
	}

	fn is_err(&self) -> bool {
		!self.is_ok()
	}
}*/ 