using core::libc::{printf, abort, malloc, memcpy};

// TODO: Replace this with an intrinsic lol
fn size_of<type T>() -> usize {
	let ptr1 = null<T>();
	let ptr2 = ptr1 + 1;

	unsafe {
		let addr1 = *(&ptr1 as usize raw*);
		let addr2 = *(&ptr2 as usize raw*);
		addr2-addr1
	}
}

unsafe fn bit_cast<type T, type U>(T t) -> U {
	// FIXME: this currently causes a monomorphization loop
	// if called from size_of<T> (through null<T>)
	if size_of<T>() != size_of<U>() {
		core::panic::panic("size_of<T> != size_of<U>!");
	};

	unsafe { *(&t as U*) }
}

unsafe fn bit_cast_unchecked<type T, type U>(T t) -> U {
	unsafe { *(&t as U*) }
}

fn null<type T>() -> T raw* {
	unsafe {
		bit_cast_unchecked<usize, T raw*>(0usize)
	}
}

unsafe fn write<type T>(T raw* dest, T src) {
	memcpy(
		dest as void mut*,
		&src as void*,
		size_of<T>()
	);
	forget<T>(src);
}

@lang(forget)
fn forget<type T>(T t) { }