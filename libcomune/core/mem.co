using core::libc::{printf, abort, malloc, memcpy};

// TODO: Replace this with an intrinsic lol
fn size_of<type T>() -> usize {
	T raw* ptr1 = malloc(0) as T raw*;
	T raw* ptr2 = ptr1 + 1;

	unsafe {
		usize addr1 = *(&ptr1 as usize raw*);
		usize addr2 = *(&ptr2 as usize raw*);
		addr2-addr1
	}
}

unsafe fn bit_cast<type T, type U>(T t) -> U {
	if size_of<T>() != size_of<U>() {
		// TODO: Replace this with a panic/throw when implemented
		printf(c"ERROR: size_of<T> != size_of<U>!\n");
		abort();
	};

	unsafe { *(&t as U*) }
}

fn null<type T>() -> T raw* {
	unsafe {
		bit_cast<usize, T raw*>(0)
	}
}

unsafe fn write<type T>(T raw* dest, T src) {
	memcpy(
		dest as void mut*,
		&src as void*,
		size_of<T>()
	);
	forget<T>(src);
}

@lang(forget)
fn forget<type T>(T t) { }