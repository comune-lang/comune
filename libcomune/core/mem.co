
@no_mangle
void mut* malloc(usize size);

@no_mangle
void mut* realloc(void mut* ptr, usize capacity);

@no_mangle
void free(void mut* ptr);

@no_mangle
void mut* memcpy(void mut* dest, void* src, usize count);

@no_mangle
int printf(u8* fmt, ...);

@no_mangle
void abort();

// TODO: Replace this with an intrinsic lol
usize size_of<type T>() {
	T* ptr1 = malloc(0) as T*;
	T* ptr2 = ptr1 + 1;

	unsafe {
		usize addr1 = *(&ptr1 as usize*);
		usize addr2 = *(&ptr2 as usize*);
		addr2-addr1
	}
}

unsafe U bit_cast<type T, type U>(T t) {
	if size_of<T>() != size_of<U>() {
		// TODO: Replace this with a panic/throw when implemented
		printf(c"ERROR: size_of<T> != size_of<U>!\n");
		abort();
	};

	unsafe { *(&t as U*) }
}

T* null<type T>() {
	unsafe {
		bit_cast<usize, T*>(0)
	}
}

T mut* null_mut<type T>() {
	unsafe {
		bit_cast<usize, T mut*>(0)
	}
}

unsafe void write<type T>(T mut* dest, T src) {
	memcpy(
		dest as void mut*,
		&src as void*,
		size_of<T>()
	)
}