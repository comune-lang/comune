using core::libc::{malloc, free, printf};
using core::mem::{bit_cast, size_of};
using core::option::{Option, None, Some};
using core::traits::Copy;
using std::vector::Vector;
using std::string::String;
using std::rc::Rc;
using std::io::{print, println};
using std::box::Box;

using module_test::fib;
using ascii = u8;

import module_test;
//import cpp_test;

module submodule_test;

struct Test {
	int a;
	int b;
}

enum EnumTest {
	VariantA,
	VariantB,
}

impl Test {
	int sum(Test& self) {
		println("This is a method call!");
		self.a + self.b
	}
	
	// the `self` parameter's type can be omitted
	int product(&self) {
		self.a * self.b
	}
}

type NestedGenerics = Vector<Vector<Vector<Vector<Vector<int>>>>>;

impl submodule_test::SubmoduleTrait for Test {
	void foo() {
		println("This is a trait in a submodule!");
	}
}

trait Hello {
	void hello(&self);
}

impl Hello for Test {
	void hello(&self) {
		println("Hello Test!");
	}
}


void impl_test() {
	let test = Test { a: 413, b: 612, };
	test.hello();
	printf(c"The sum of a and b is %i!\n", test.sum());
}

void ref_test(i32 mut& test) {
	test += 1;
}

void fn_pointer_test(void(int) callback) {
	callback(12);
}

void fn_pointer_callback(int number) {
	printf(c"this is a callback! %i\n", number);
}


void overload_test(i32 a) {
	println("i32 overload called!");
}

void overload_test(i64 a) {
	println("i64 overload called!");
}

type GenericTypeAlias<type T> = Vector<T>;

Vector<i32> generic_ret() {
	GenericTypeAlias<i32>()
}

type TestSumType = (i32 | f32);

TestSumType sum_type_test(i32 value) {
	return value;
}

void slice_test([i32]* test) {
	printf(c"Slice length: %i\n", test->len());
}


struct DropTest {
	int num;
	int raw* allocation;

	drop(mut& self) {
		printf(c"DropTest no. %i dropped\n", self.num);
		free(self.allocation as void raw*)
	}

	new(new& self, int num) {
		printf(c"DropTest no. %i created!\n", num);

		self = DropTest {
			num,
			allocation: malloc(4) as int raw*,
		}
	}
}

impl DropTest {
	void consume(self) {
		printf(c"Consuming DropTest %i\n", self.num);
	}
}

void temp_drop_test(DropTest& test) {
	println("temp_drop_test(DropTest&) called");
}

void drop_test() {
	println("\nEntering drop_test\n");
	sub_drop_test();
	println("Left drop_test\n");
}

void memberwise_init_test(DropTest new& test) {
	test.num = -1;
	test.allocation = malloc(4) as int raw*;
}

void sub_drop_test() {
	let a = DropTest(1);
	let b = DropTest(2);

	println("\nEntering subscope\n");
	{
		let c = DropTest(3);
		
		let mut i = 0;
		
		println("\nEntering loop\n");

		while i < 5 {
			let b = DropTest(4);

			if i == 4 {
				break
			}

			i += 1;
		}

		println("\nLeft loop\n");

	}
	println("\nLeft subscope\n");

	println("\nVector<DropTest> test:\n");

	{
		let mut drop_vec = Vector<DropTest>();
		drop_vec.push(DropTest(5));
		drop_vec.push(DropTest(6));
		
		*drop_vec.get_mut(1).unwrap() = DropTest(7);
	}

	println("\nLeft Vector<DropTest> scope\n");

	// FIXME: the codegen for this is a little Fucked.
	//Option<DropTest> option = Option<DropTest>::Some(
	//	DropTest(8)
	//);

	temp_drop_test(DropTest(9));

	DropTest(10).consume();
}

void new_ref_test(Vector<float> new& test) {
	test = Vector<float>();
}

void mut_move_test(Vector<float> mut& test) {
	// move out of mut* - legal, but...
	let tmp = test;

	// we have to make sure it's initialized
	// by the end of the function. commenting 
	// out this line would raise a compile error 
	test = tmp;
}

void enum_test() {
	let Option<auto> resolve = None<i32>;
	
	let Option<i32> mut option = None<i32>;
	
	option = Some<i32> {
		value: 23,
	};

	match option {
		None<i32> none => { 
			println("It's the None variant!");
		}

		Some<i32> { value } => {
			printf(c"It's the Some(%i) variant!\n", value);
		}
	}

	let Option<i32> mut option = Some<i32>(1);

	let unwrapped = option.unwrap();

	option = None<i32>;
	
	//option.unwrap();
}

void ops_test() {
	let u8 mut bitwise_test = 0xFF;
	bitwise_test &= 0x0Fu8;
	bitwise_test <<= 2;
	bitwise_test >>= 1;
	bitwise_test |= 0;
	bitwise_test ^= 1;

	printf(c"value of bitwise_test: %i\n", bitwise_test);

	let this_value = !true;

	printf(c"this_value is %s!\n", if this_value {
		c"true"
	} else {
		c"false"
	});
}

void rc_test() {
	println("Creating Rc<DropTest>!");
	let rc = Rc<DropTest>(DropTest(0));
	
	for (let mut i = 0; i < 10; i += 1) {
		println("Cloning Rc<DropTest>!");
		let rc = Rc<DropTest>(rc);
		println("Dropping Rc<DropTest>!");
	}
	println("Dropping last Rc<DropTest>!");
}

struct DerefTest {
	int a;
}

void ptr_access_test() {
	let mut a = DerefTest {
		a: 0
	};
	
	let mut b = &mut a;
	let mut c = &mut b;
	let mut d = &mut c;
	
	b->a = 1;
	c->>a = 2;
	d->>>a = 3;
}


int mut global_var;

void global_var_test() {
	unsafe { global_var = 0; }
}

void empty_fn_test() {}

void string_test() {
	println("String test!\n");
	
	let mut test = String();
	
	test.push_str("Hello");
	test.push_str("");
	test.push_str(" ");
	test.push_str("world!");

	printf(c"%s\n\n", test.c_str());
}

fn copy_test<type T: Copy>(T t) {
	let a = t;
	let b = t;
}

struct GenericTypeBounds<type T: Copy> {
	T t;
}

struct SwapTest {
	int a;
	int b;
}


void file_test() {
	let mut file = std::fs::File::open(c"test/testfile.txt").unwrap();
	let mut buf = Vector<u8>();

	buf.resize(64, 0);

	file.read_into(buf.as_slice_mut());
	printf(c"Contents of file test/testfile.txt:\n\n%s\n\n", buf);
}


int main() {
	file_test();

	// fails: String does not implement Copy
	// copy_test<String>(String());

	// succeeds: u32 implicitly implements Copy
	copy_test<u32>(0);
	
	// fails: String does not implement Copy	
	// GenericTypeBounds<String> test;

	let mut swap_test = SwapTest {
		a: 413,
		b: 612,
	};

	swap_test = SwapTest {
		a: swap_test.b,
		b: swap_test.a,
	};

	printf(
		c"Swap test:\n  a: %i\n  b: %i\n",
		swap_test.a,
		swap_test.b
	);

	ops_test();
	enum_test();
	drop_test();
	rc_test();
	string_test();

	global_var_test();
	printf(c"Global var: %i\n", global_var);

	let slice_data = 0;
	
	// no slice syntax yet - just duck-type one manually lol
	let slice = core::slice::SliceRepr<i32> {
		ptr: &slice_data as i32 raw*,
		len: 1,
	};

	slice_test(slice.as_slice());

	let slice_ptr = &slice_data;
	slice_ptr.addr();

	submodule_test::bar();
	printf(c"fib(10) = %i\n", module_test::fib(10));

	let Vector<float> mut a;
	
	new_ref_test(a);

	a.push(12.0f);

	if true {
		drop a;
	}

	let int i;

	if true {
		i = 12;
	} else {
		i = 12;
	}

	let mut i = i;

	let i = 12;

	{
		let explicit_scope_test = 23;
	}

	// `else if` syntax test
	
	if i == 12 {
		let scope_test = 15;
		let scope_test_2 = 15;
		println("i is 12!");
	} else if i == 13 {
		println("i is 13!");
	} else {
		println("i is something else!");
	}

	let void(int) function;
	//function(12);
	//fn_pointer_test(fn_pointer_callback);
	
	let TestSumType mut who_knows = sum_type_test(322);

	match who_knows {
		int int_result => {
			printf(c"It's an int! %i\n", int_result)
		}

		float float_result => {
			printf(c"It's a float! %f\n", float_result)
		}
	}
	
	let mut loop_count = 0;
	
	while true {		
		loop_count += 1;

		if loop_count > 100 {
			let loop_init_test = 12;
			break;
		}
	}

	printf(c"Loop count after loop: %i\n", loop_count);
	
	impl_test();

	overload_test(12i32);

	let mut int_ref_test = 12;
	ref_test(int_ref_test);
	printf(c"int_ref_test: %i\n", int_ref_test);

	printf(c"Temporary->lvalue promotion: %i\n", Test { a: 23, b: 35 }.sum());
	
	unsafe {
		printf(c"bit_cast<f32, u32>: %i\n", bit_cast<f32, u32>(10.0f32));
	}

	0
}