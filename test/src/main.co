struct Vector<type T> {
	T mut* data;
	usize len;
	usize capacity;
}

@no_mangle
void mut* malloc(usize size);

@no_mangle
void free(void mut* ptr);

@no_mangle
void printf(u8* fmt, ...);

impl<type T> Vector<T> {

	Vector<T> new() {
		Vector<T> {
			data: malloc(0) as T mut*,
			len: 0,
			capacity: 0,
		}
	}

	void push(mut& self, T elem) {
		printf(c"Pushing %i... new size: %i\n", elem, self.len + 1);
		self.len += 1;
		
		if self.len > self.capacity {
			if self.capacity == 0 {
				self.realloc(1);
			} else {
				self.realloc(self.capacity * 2);
			}
		}
	}

	void realloc(mut& self, usize capacity) {
		printf(c"Reallocating... new capacity: %i\n", capacity);

		// TODO: Implement sizeof(T)
		T mut* mut new_storage = malloc(capacity) as T mut*;
		
		for (usize mut i = 0; i < self.len; i++) {
			unsafe { 
				*(new_storage + i) = *(self.data + i);
			}
		}
		
		free(self.data as void mut*);
		self.data = new_storage;
		self.capacity = capacity;
	}

	// TODO: Implement returning references with `self` lifetime
	T get(mut& self, usize i) {
		unsafe { *(self.data + i) }
	}

}


int main() {
	Vector<i32> mut test = Vector<i32> {
		data: malloc(0) as i32 mut*,
		len: 0,
		capacity: 0,
	};

	test.push(413);
	test.push(612);

	test.get(0)
}