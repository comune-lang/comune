import module_test;
//import lifetimes;

using module_test::{fib, foo};

@no_mangle
void printf(char* fmt, ...);

@no_mangle
void* malloc(usize size);

@no_mangle
void free(void* ptr);

@layout(packed)
struct Test {
	int a;
	int b;
}

impl Test {
	int sum(Test self) {
		printf("This is a method call!\n\0");
		self.a + self.b
	}
}

struct Vector<T> {
	T* data;
	usize len;
	usize capacity;
}

(i32 | f32) who_knows(i32 cool) {
	return cool * 2;
}

int main() {
	printf("This is main()!\n\0");

	printf("This is a vararg test! the magic number is %i\n\0", fib(10));

	(int | float) who_knows_result = who_knows(21);

	match who_knows_result {
		int int_result => {
			printf("It's an int!\n\0");
		}

		float float_result => {
			printf("It's a float!\n\0");
		}
	}

	Vector<int> my_cool_generic;

	my_cool_generic.data = malloc(8) as int*;
	
	*my_cool_generic.data = if true {
		printf("True!\n\0");
		69
	} else {
		printf("False!\n\0");
		42
	};
	
	// This fucks with lifeline's liveness check - something to do with sublocation tracking
	i32 generic_get = *my_cool_generic.data;
	*my_cool_generic.data = 69;

	// Borrowck stuff
	Test test;

	test = Test { 
		a: *my_cool_generic.data, 
		b: 0
	};

	free(my_cool_generic.data as void*);

	test.sum()
}
